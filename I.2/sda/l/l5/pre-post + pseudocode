previous(it)
pre: it ist ein SLLIterator, it ist g√ºltig
post: it', ein SLLIterator, das aktuelle Node aus it' verweist auf das vorige Element

bool previous()
if NOT valid
    @exception
end-if
// If the stack is empty, there are no previous elements
if stackLength = 0
    return FALSE
int parentIndex = map.parent[current]
// If the parent has a left child, move to the leftmost child
if map.left[parentIndex] != NULL_TELEM
    current = map.left[parentIndex]
    while (current != -1)
        @push(current)
        current = map.left[current]
    end-while
// If there is no left child, we move to the parent itself
else
current = parentIndex
end-if
// We return the value associated with the previous node
if map.info[current].value // Exists
    return TRUE
end-if